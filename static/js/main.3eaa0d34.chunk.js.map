{"version":3,"sources":["serviceWorker.js","index.js","components/App.js","components/Navbar.js","box.png","globalStyles.js","components/Main.js","components/helpers.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ipfs","require","ipfsClient","host","port","protocol","props","captureFile","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","setState","buffer","Buffer","result","type","name","console","log","state","uploadFile","description","add","error","size","loading","dstorage","methods","hash","send","from","account","on","reload","e","alert","bind","this","loadWeb3","loadBlockchainData","ethereum","web3","Web3","enable","currentProvider","eth","getAccounts","accounts","net","getId","networkId","networkData","DStorage","networks","Contract","abi","address","fileCount","call","filesCount","i","theme","href","id","className","Component","Navbar","rel","src","box","width","height","alt","substring","Identicon","toString","module","exports","GlobalStyle","createGlobalStyle","Main","role","style","maxWidth","onSubmit","fileDescription","value","onChange","ref","input","placeholder","required","maxHeight","fontSize","scope","map","key","fileId","fileName","fileType","bytes","parseInt","Math","floor","round","pow","convertBytes","fileSize","moment","unix","uploadTime","format","uploader","fileHash"],"mappings":"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","file":"static/js/main.3eaa0d34.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import DStorage from \"../abis/DStorage.json\";\nimport React, { Component } from \"react\";\nimport Navbar from \"./Navbar\";\nimport Main from \"./Main\";\nimport Web3 from \"web3\";\nimport GlobalStyle from \"../globalStyles\";\nimport { AlertBanner } from \"../../node_modules/@thumbtack/thumbprint-react\";\n\nconst ipfsClient = require(\"ipfs-http-client\");\nconst ipfs = ipfsClient({\n  host: \"ipfs.infura.io\",\n  port: 5001,\n  protocol: \"https\",\n}); // leaving out the arguments will default to these values\n\nclass App extends Component {\n  async componentWillMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert(\n        \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\n      );\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    // Load account\n    const accounts = await web3.eth.getAccounts();\n    this.setState({ account: accounts[0] });\n    // Network ID\n    const networkId = await web3.eth.net.getId();\n    const networkData = DStorage.networks[networkId];\n    if (networkData) {\n      // Assign contract\n      const dstorage = new web3.eth.Contract(DStorage.abi, networkData.address);\n      this.setState({ dstorage });\n      // Get files amount\n      const filesCount = await dstorage.methods.fileCount().call();\n      this.setState({ filesCount });\n      // Load files&sort by the newest\n      for (var i = filesCount; i >= 1; i--) {\n        const file = await dstorage.methods.files(i).call();\n        this.setState({\n          files: [...this.state.files, file],\n        });\n      }\n    } else {\n      window.alert(\"DStorage contract not deployed to detected network.\");\n    }\n  }\n\n  // Get file from user\n  captureFile = (event) => {\n    event.preventDefault();\n\n    const file = event.target.files[0];\n    const reader = new window.FileReader();\n\n    reader.readAsArrayBuffer(file);\n    reader.onloadend = () => {\n      this.setState({\n        buffer: Buffer(reader.result),\n        type: file.type,\n        name: file.name,\n      });\n      console.log(\"buffer\", this.state.buffer);\n    };\n  };\n\n  uploadFile = (description) => {\n    console.log(\"Submitting file to IPFS...\");\n\n    // Add file to the IPFS\n    ipfs.add(this.state.buffer, (error, result) => {\n      console.log(\"IPFS result\", result.size);\n      if (error) {\n        console.error(error);\n        return;\n      }\n\n      this.setState({ loading: true });\n      // Assign value for the file without extension\n      if (this.state.type === \"\") {\n        this.setState({ type: \"none\" });\n      }\n      this.state.dstorage.methods\n        .uploadFile(\n          result[0].hash,\n          result[0].size,\n          this.state.type,\n          this.state.name,\n          description\n        )\n        .send({ from: this.state.account })\n        .on(\"transactionHash\", (hash) => {\n          this.setState({\n            loading: false,\n            type: null,\n            name: null,\n          });\n          window.location.reload();\n        })\n        .on(\"error\", (e) => {\n          window.alert(\"Error\");\n          this.setState({ loading: false });\n        });\n    });\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: \"\",\n      dstorage: null,\n      files: [],\n      loading: false,\n      type: null,\n      name: null,\n    };\n    this.uploadFile = this.uploadFile.bind(this);\n    this.captureFile = this.captureFile.bind(this);\n  }\n\n  render() {\n    return (\n      <div>\n        <GlobalStyle />\n        <Navbar account={this.state.account} />\n        <AlertBanner theme=\"info\">\n          This demo project runs on the Rinkeby network. Get some rinkeby ETH if\n          you don't have any.&nbsp;\n          <a href=\"https://faucet.rinkeby.io/\">Rinkeby Faucet</a>\n        </AlertBanner>\n        <h1>DecentraBox</h1>\n        <h3>Free Cloud Storage Forever</h3>\n        {this.state.loading ? (\n          <div id=\"loader\" className=\"text-center mt-5\">\n            <p className=\"text-white\">Loading...</p>\n          </div>\n        ) : (\n          <Main\n            files={this.state.files}\n            captureFile={this.captureFile}\n            uploadFile={this.uploadFile}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nimport Identicon from \"identicon.js\";\nimport box from \"../box.png\";\n\nclass Navbar extends Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-dark bg-dark p-0 text-monospace\">\n        <a\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n          href=\"https://www.blockequity.com\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <img src={box} width=\"30\" height=\"30\" className=\"align-top\" alt=\"\" />\n          DecentraBox\n        </a>\n        <ul className=\"navbar-nav px-3\">\n          {/* Concantenate the address */}\n          <li>\n            <small id=\"account\">\n              <a\n                target=\"_blank\"\n                alt=\"\"\n                className=\"text-white\"\n                rel=\"noopener noreferrer\"\n                href={\n                  \"https://rinkeby.etherscan.io/address/\" + this.props.account\n                }\n              >\n                {this.props.account\n                  ? this.props.account.substring(0, 6)\n                  : \"0x0\"}\n                ...\n                {this.props.account\n                  ? this.props.account.substring(38, 42)\n                  : \"0x0\"}\n              </a>\n            </small>\n            {this.props.account ? (\n              <img\n                alt=\"\"\n                className=\"ml-2\"\n                width=\"30\"\n                height=\"30\"\n                src={`data:image/png;base64,${new Identicon(\n                  this.props.account,\n                  30\n                ).toString()}`}\n              />\n            ) : (\n              <span></span>\n            )}\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","module.exports = __webpack_public_path__ + \"static/media/box.df8b84d5.png\";","/** @format */\n\nimport styled, { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyle = createGlobalStyle`\nbody {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n  font-family: 'Montserrat', sans-serif;\n  background: #16151f;\n}\n\nh1 {\n  color: #ffffff;\n  text-align: center;\n  padding-top: 50px;\n}\nh3{\n  color: #ffffff;\n  text-align: center;\n}\n`;\n\nexport default GlobalStyle;\n","import React, { Component } from \"react\";\nimport { convertBytes } from \"./helpers\";\nimport moment from \"moment\";\n\nclass Main extends Component {\n  render() {\n    return (\n      <div className=\"container-fluid mt-5 text-center\">\n        <div className=\"row\">\n          <main\n            role=\"main\"\n            className=\"col-lg-12 ml-auto mr-auto\"\n            style={{ maxWidth: \"1024px\" }}\n          >\n            <div className=\"content\">\n              <p>&nbsp;</p>\n              <div\n                className=\"card mb-3 mx-auto bg-dark\"\n                style={{ maxWidth: \"512px\" }}\n              >\n                <h2 className=\"text-white text-monospace\">\n                  <b>\n                    <ins>Upload File</ins>\n                  </b>\n                </h2>\n                <form\n                  onSubmit={(event) => {\n                    event.preventDefault();\n                    const description = this.fileDescription.value;\n                    this.props.uploadFile(description);\n                  }}\n                >\n                  <input\n                    type=\"file\"\n                    onChange={this.props.captureFile}\n                    className=\"text-white text-monospace\"\n                  />\n                  <div className=\"form-group\">\n                    <br></br>\n                    <input\n                      id=\"fileDescription\"\n                      type=\"text\"\n                      ref={(input) => {\n                        this.fileDescription = input;\n                      }}\n                      className=\"form-control text-monospace\"\n                      placeholder=\"description...\"\n                      required\n                    />\n                  </div>\n                  <button type=\"submit\" className=\"btn-primary btn-block\">\n                    <b>Upload!</b>\n                  </button>\n                </form>\n              </div>\n              <p>&nbsp;</p>\n              <table\n                className=\"table-sm table-bordered text-monospace\"\n                style={{ width: \"1000px\", maxHeight: \"450px\" }}\n              >\n                <thead style={{ fontSize: \"15px\" }}>\n                  <tr className=\"bg-dark text-white\">\n                    <th scope=\"col\" style={{ width: \"10px\" }}>\n                      id\n                    </th>\n                    <th scope=\"col\" style={{ width: \"200px\" }}>\n                      name\n                    </th>\n                    <th scope=\"col\" style={{ width: \"230px\" }}>\n                      description\n                    </th>\n                    <th scope=\"col\" style={{ width: \"120px\" }}>\n                      type\n                    </th>\n                    <th scope=\"col\" style={{ width: \"90px\" }}>\n                      size\n                    </th>\n                    <th scope=\"col\" style={{ width: \"90px\" }}>\n                      date\n                    </th>\n                    <th scope=\"col\" style={{ width: \"120px\" }}>\n                      uploader/view\n                    </th>\n                    <th scope=\"col\" style={{ width: \"120px\" }}>\n                      hash/view/get\n                    </th>\n                  </tr>\n                </thead>\n                {this.props.files.map((file, key) => {\n                  return (\n                    <thead style={{ fontSize: \"12px\" }} key={key}>\n                      <tr className=\"text-white\">\n                        <td>{file.fileId}</td>\n                        <td>{file.fileName}</td>\n                        <td>{file.fileDescription}</td>\n                        <td>{file.fileType}</td>\n                        <td>{convertBytes(file.fileSize)}</td>\n                        <td>\n                          {moment\n                            .unix(file.uploadTime)\n                            .format(\"h:mm:ss A M/D/Y\")}\n                        </td>\n                        <td>\n                          <a\n                            href={\n                              \"https://rinkeby.etherscan.io/address/\" +\n                              file.uploader\n                            }\n                            rel=\"noopener noreferrer\"\n                            target=\"_blank\"\n                          >\n                            {file.uploader.substring(0, 10)}...\n                          </a>\n                        </td>\n                        <td>\n                          <a\n                            href={\n                              \"https://ipfs.infura.io/ipfs/\" + file.fileHash\n                            }\n                            rel=\"noopener noreferrer\"\n                            target=\"_blank\"\n                          >\n                            {file.fileHash.substring(0, 10)}...\n                          </a>\n                        </td>\n                      </tr>\n                    </thead>\n                  );\n                })}\n              </table>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","export function convertBytes(bytes) {\r\n   var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n   if (bytes === 0) return '0 Byte';\r\n   var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\r\n   return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];\r\n}"],"sourceRoot":""}